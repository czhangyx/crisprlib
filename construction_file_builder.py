"""
Author: Yixin Zhang
Last updated: Dec. 11, 2023

This file contains output_CF function, which generates human-readable and json construction files.
"""

import json

def output_CF(primer_names, primer_sequences, pcr_product, export_file_path):
    """
    Generates construction files from a list of lists of gRNAs.

    Args:
    primer_names (list): List of primer names.
    primer_sequences (list): List of primer sequences.
    pcr_product (list): List of PCR products obtained from amplifying generated gRNAs.
    export_file_path: Path to the output construction file.
    """
    grna_names = []
    json_dict = {
        'steps': [],
        'sequences': {}
    }

    # Populate json_dict['sequences'] with primers
    for i in range(len(primer_names)):
        json_dict["sequences"][primer_names[i]] = {
            "sequence": str(primer_sequences[i]),
            "ext5": None,
            "ext3": None,
            "is_double_stranded": False,
            "is_circular": False,
            "mod_ext5": "hydroxyl",
            "mod_ext3": None
        }

    # Write to readable construction file
    with open(f'{export_file_path}_readable.txt', 'w') as file:
        # PCR
        file.write('# Cloning Steps\n')
        file.write('pcr\tbackbone_fwd\tbackbone_rev\tpTargetF\tbackbone_fragment\n')  # Backbone
        json_dict["sequences"]['pTargetF'] = {
            "sequence": 'CATGTTCTTTCCTGCGTTATCCCCTGATTCTGTGGATAACCGTATTACCGCCTTTGAGTGAGCTGATACCGCTCGCCGCAGCCGAACGACCGAGCGCAGCGAGTCAGTGAGCGAGGAAGCGGAAGAGCGCCTGATGCGGTATTTTCTCCTTACGCATCTGTGCGGTATTTCACACCGCATATGCTGGATCCTTGACAGCTAGCTCAGTCCTAGGTATAATACTAGTCATCGCCGCAGCGGTTTCAGGTTTTAGAGCTAGAAATAGCAAGTTAAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTTGAATTCTCTAGAGTCGACCTGCAGAAGCTTAGATCTATTACCCTGTTATCCCTACTCGAGTTCATGTGCAGCTCCATAAGCAAAAGGGGATGATAAGTTTATCACCACCGACTATTTGCAACAGTGCCGTTGATCGTGCTATGATCGACTGATGTCATCAGCGGTGGAGTGCAATGTCATGAGGGAAGCGGTGATCGCCGAAGTATCGACTCAACTATCAGAGGTAGTTGGCGTCATCGAGCGCCATCTCGAACCGACGTTGCTGGCCGTACATTTGTACGGCTCCGCAGTGGATGGCGGCCTGAAGCCACACAGTGATATTGATTTGCTGGTTACGGTGACCGTAAGGCTTGATGAAACAACGCGGCGAGCTTTGATCAACGACCTTTTGGAAACTTCGGCTTCCCCTGGAGAGAGCGAGATTCTCCGCGCTGTAGAAGTCACCATTGTTGTGCACGACGACATCATTCCGTGGCGTTATCCAGCTAAGCGCGAACTGCAATTTGGAGAATGGCAGCGCAATGACATTCTTGCAGGTATCTTCGAGCCAGCCACGATCGACATTGATCTGGCTATCTTGCTGACAAAAGCAAGAGAACATAGCGTTGCCTTGGTAGGTCCAGCGGCGGAGGAACTCTTTGATCCGGTTCCTGAACAGGATCTATTTGAGGCGCTAAATGAAACCTTAACGCTATGGAACTCGCCGCCCGACTGGGCTGGCGATGAGCGAAATGTAGTGCTTACGTTGTCCCGCATTTGGTACAGCGCAGTAACCGGCAAAATCGCGCCGAAGGATGTCGCTGCCGACTGGGCAATGGAGCGCCTGCCGGCCCAGTATCAGCCCGTCATACTTGAAGCTAGACAGGCTTATCTTGGACAAGAAGAAGATCGCTTGGCCTCGCGCGCAGATCAGTTGGAAGAATTTGTCCACTACGTGAAAGGCGAGATCACCAAGGTAGTCGGCAAATAAGATGCCGCTCGCCAGTCGATTGGCTGAGCTCATAAGTTCCTATTCCGAAGTTCCGCGAACGCGTAAAGGATCTAGGTGAAGATCCTTTTTGATAATCTCATGACCAAAATCCCTTAACGTGAGTTTTCGTTCCACTGAGCGTCAGACCCCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTTTTTTTCTGCGCGTAATCTGCTGCTTGCAAACAAAAAAACCACCGCTACCAGCGGTGGTTTGTTTGCCGGATCAAGAGCTACCAACTCTTTTTCCGAAGGTAACTGGCTTCAGCAGAGCGCAGATACCAAATACTGTCCTTCTAGTGTAGCCGTAGTTAGGCCACCACTTCAAGAACTCTGTAGCACCGCCTACATACCTCGCTCTGCTAATCCTGTTACCAGTGGCTGCTGCCAGTGGCGATAAGTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAGGCGCAGCGGTCGGGCTGAACGGGGGGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAACTGAGATACCTACAGCGTGAGCTATGAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTATCCGGTAAGCGGCAGGGTCGGAACAGGAGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCCTGGTATCTTTATAGTCCTGTCGGGTTTCGCCACCTCTGACTTGAGCGTCGATTTTTGTGATGCTCGTCAGGGGGGCGGAGCCTATGGAAAAACGCCAGCAACGCGGCCTTTTTACGGTTCCTGGCCTTTTGCTGGCCTTTTGCTC',
            "ext5": None,
            "ext3": None,
            "is_double_stranded": True,
            "is_circular": True,
            "mod_ext5": None,
            "mod_ext3": None
        }
        i = 2
        while i < len(primer_names):
            grna_name = primer_names[i][:-4]
            grna_names.append(grna_name)
            file.write(f'pcr\t{primer_names[i]}\t{primer_names[i+1]}\t{grna_name}\t{grna_name}_fragment\n')
            json_dict['steps'].append({
                "operation": "PCR",
                "forward_oligo": primer_names[i],
                "reverse_oligo": primer_names[i+1],
                "template": grna_name,
                "output": f"{grna_name}_fragment"
            })
            i += 2
        
        # Digest
        file.write('digest\tbackbone_fragment\tSpeI\tEcoRI\t1\tbackbone_digested\n')
        for grna in grna_names:
            file.write(f'digest\t{grna}\tSpeI\tEcoRI\t1\t{grna}_digested\n')
            json_dict['steps'].append({
                "operation": "Digest",
                "dna": grna,
                "enzymes": ["EcoRI","SpeI"],
                "fragSelect": 1,
                "output": f"{grna}_digested"
            })
        
        # Ligate
        for grna in grna_names:
            file.write(f'ligate\tbackbone_fragment\t{grna}_digested\t{grna}_ligated\n')
            json_dict['steps'].append({
                "operation": "Ligate",
                "dnas": ["backbone_fragment", f"{grna}_digested"],
                "output": f"{grna}_ligated"
            })
        
        # Transform
        for i in range(len(grna_names)):
            file.write(f'transform\t{grna_names[i]}_ligated\tMach1\tSpec\t37\tpTarget-{grna_names[i]}\n')
            json_dict['steps'].append({
                "operation": "Transform",
                "dna": f"{grna_names[i]}_ligated",
                "strain": "Mach1",
                "antibiotics": "Spec",
                "temperature": 37,
                "output": f"pTarget-{grna_names[i]}"
            })
            json_dict["sequences"][f'pTarget-{grna_names[i]}'] = {
            "sequence": str(pcr_product[i]) + 'GAATTCTCTAGAGTCGACCTGCAGAAGCTTAGATCTATTACCCTGTTATCCCTACTCGAGTTCATGTGCAGCTCCATAAGCAAAAGGGGATGATAAGTTTATCACCACCGACTATTTGCAACAGTGCCGTTGATCGTGCTATGATCGACTGATGTCATCAGCGGTGGAGTGCAATGTCATGAGGGAAGCGGTGATCGCCGAAGTATCGACTCAACTATCAGAGGTAGTTGGCGTCATCGAGCGCCATCTCGAACCGACGTTGCTGGCCGTACATTTGTACGGCTCCGCAGTGGATGGCGGCCTGAAGCCACACAGTGATATTGATTTGCTGGTTACGGTGACCGTAAGGCTTGATGAAACAACGCGGCGAGCTTTGATCAACGACCTTTTGGAAACTTCGGCTTCCCCTGGAGAGAGCGAGATTCTCCGCGCTGTAGAAGTCACCATTGTTGTGCACGACGACATCATTCCGTGGCGTTATCCAGCTAAGCGCGAACTGCAATTTGGAGAATGGCAGCGCAATGACATTCTTGCAGGTATCTTCGAGCCAGCCACGATCGACATTGATCTGGCTATCTTGCTGACAAAAGCAAGAGAACATAGCGTTGCCTTGGTAGGTCCAGCGGCGGAGGAACTCTTTGATCCGGTTCCTGAACAGGATCTATTTGAGGCGCTAAATGAAACCTTAACGCTATGGAACTCGCCGCCCGACTGGGCTGGCGATGAGCGAAATGTAGTGCTTACGTTGTCCCGCATTTGGTACAGCGCAGTAACCGGCAAAATCGCGCCGAAGGATGTCGCTGCCGACTGGGCAATGGAGCGCCTGCCGGCCCAGTATCAGCCCGTCATACTTGAAGCTAGACAGGCTTATCTTGGACAAGAAGAAGATCGCTTGGCCTCGCGCGCAGATCAGTTGGAAGAATTTGTCCACTACGTGAAAGGCGAGATCACCAAGGTAGTCGGCAAATAAGATGCCGCTCGCCAGTCGATTGGCTGAGCTCATAAGTTCCTATTCCGAAGTTCCGCGAACGCGTAAAGGATCTAGGTGAAGATCCTTTTTGATAATCTCATGACCAAAATCCCTTAACGTGAGTTTTCGTTCCACTGAGCGTCAGACCCCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTTTTTTTCTGCGCGTAATCTGCTGCTTGCAAACAAAAAAACCACCGCTACCAGCGGTGGTTTGTTTGCCGGATCAAGAGCTACCAACTCTTTTTCCGAAGGTAACTGGCTTCAGCAGAGCGCAGATACCAAATACTGTCCTTCTAGTGTAGCCGTAGTTAGGCCACCACTTCAAGAACTCTGTAGCACCGCCTACATACCTCGCTCTGCTAATCCTGTTACCAGTGGCTGCTGCCAGTGGCGATAAGTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAGGCGCAGCGGTCGGGCTGAACGGGGGGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAACTGAGATACCTACAGCGTGAGCTATGAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTATCCGGTAAGCGGCAGGGTCGGAACAGGAGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCCTGGTATCTTTATAGTCCTGTCGGGTTTCGCCACCTCTGACTTGAGCGTCGATTTTTGTGATGCTCGTCAGGGGGGCGGAGCCTATGGAAAAACGCCAGCAACGCGGCCTTTTTACGGTTCCTGGCCTTTTGCTGGCCTTTTGCTCACATGTTCTTTCCTGCGTTATCCCCTGATTCTGTGGATAACCGTATTACCGCCTTTGAGTGAGCTGATACCGCTCGCCGCAGCCGAACGACCGAGCGCAGCGAGTCAGTGAGCGAGGAAGCGGAAGAGCGCCTGATGCGGTATTTTCTCCTTACGCATCTGTGCGGTATTTCACACCGCATATGCTGGATCCTTGACAGCTAGCTCAGTCCTAGGTATAATACTAGT',
            "ext5": None,
            "ext3": None,
            "is_double_stranded": True,
            "is_circular": True,
            "mod_ext5": None,
            "mod_ext3": None
            }
        
        # Sequences
        file.write('\n# Input Sequences\n')
        for seq in json_dict["sequences"]:
            file.write(f'{seq}\t{json_dict["sequences"][seq]["sequence"]}\n')
        
    # Write to json construction file
    formatted_json = json.dumps(json_dict, indent=4)
    with open(f'{export_file_path}.json', 'w') as file:
        file.write(formatted_json)
