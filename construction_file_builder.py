"""
Author: Yixin Zhang
Last updated: Dec. 11, 2023

This file contains output_CF function, which generates human-readable and json construction files.
"""

import json
from dna import DNA

class CFBuilder:
    def __init__(self, export_file_path) -> None:
        self.export_file_path = export_file_path

    def output_CF(self, primers, pcr_products):
        """
        Generates construction files from a list of lists of gRNAs.

        Args:
        primers (list): List of primers, which are DNA objects.
        pcr_products (list): List of PCR products obtained from amplifying generated gRNAs,
                             which are DNA objects.
        """
        grna_names = []
        json_dict = {
            'steps': [],
            'sequences': {}
        }

        # Populate json_dict['sequences'] with primers
        for i in range(len(primers)):
            primer = primers[i]
            json_dict["sequences"][primer.name] = primer.get_json_dict()

        # Write to readable construction file
        with open(f'{self.export_file_path}_readable.txt', 'w') as file:
            # PCR
            file.write('# Cloning Steps\n')
            file.write('pcr\tbackbone_fwd\tbackbone_rev\tpTargetF\tbackbone_fragment\n')  # Backbone
            pTargetF = DNA('pTargetF', 'CATGTTCTTTCCTGCGTTATCCCCTGATTCTGTGGATAACCGTATTACCGCCTTTGAGTGAGCTGATACCGCTCGCCGCAGCCGAACGACCGAGCGCAGCGAGTCAGTGAGCGAGGAAGCGGAAGAGCGCCTGATGCGGTATTTTCTCCTTACGCATCTGTGCGGTATTTCACACCGCATATGCTGGATCCTTGACAGCTAGCTCAGTCCTAGGTATAATACTAGTCATCGCCGCAGCGGTTTCAGGTTTTAGAGCTAGAAATAGCAAGTTAAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTTGAATTCTCTAGAGTCGACCTGCAGAAGCTTAGATCTATTACCCTGTTATCCCTACTCGAGTTCATGTGCAGCTCCATAAGCAAAAGGGGATGATAAGTTTATCACCACCGACTATTTGCAACAGTGCCGTTGATCGTGCTATGATCGACTGATGTCATCAGCGGTGGAGTGCAATGTCATGAGGGAAGCGGTGATCGCCGAAGTATCGACTCAACTATCAGAGGTAGTTGGCGTCATCGAGCGCCATCTCGAACCGACGTTGCTGGCCGTACATTTGTACGGCTCCGCAGTGGATGGCGGCCTGAAGCCACACAGTGATATTGATTTGCTGGTTACGGTGACCGTAAGGCTTGATGAAACAACGCGGCGAGCTTTGATCAACGACCTTTTGGAAACTTCGGCTTCCCCTGGAGAGAGCGAGATTCTCCGCGCTGTAGAAGTCACCATTGTTGTGCACGACGACATCATTCCGTGGCGTTATCCAGCTAAGCGCGAACTGCAATTTGGAGAATGGCAGCGCAATGACATTCTTGCAGGTATCTTCGAGCCAGCCACGATCGACATTGATCTGGCTATCTTGCTGACAAAAGCAAGAGAACATAGCGTTGCCTTGGTAGGTCCAGCGGCGGAGGAACTCTTTGATCCGGTTCCTGAACAGGATCTATTTGAGGCGCTAAATGAAACCTTAACGCTATGGAACTCGCCGCCCGACTGGGCTGGCGATGAGCGAAATGTAGTGCTTACGTTGTCCCGCATTTGGTACAGCGCAGTAACCGGCAAAATCGCGCCGAAGGATGTCGCTGCCGACTGGGCAATGGAGCGCCTGCCGGCCCAGTATCAGCCCGTCATACTTGAAGCTAGACAGGCTTATCTTGGACAAGAAGAAGATCGCTTGGCCTCGCGCGCAGATCAGTTGGAAGAATTTGTCCACTACGTGAAAGGCGAGATCACCAAGGTAGTCGGCAAATAAGATGCCGCTCGCCAGTCGATTGGCTGAGCTCATAAGTTCCTATTCCGAAGTTCCGCGAACGCGTAAAGGATCTAGGTGAAGATCCTTTTTGATAATCTCATGACCAAAATCCCTTAACGTGAGTTTTCGTTCCACTGAGCGTCAGACCCCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTTTTTTTCTGCGCGTAATCTGCTGCTTGCAAACAAAAAAACCACCGCTACCAGCGGTGGTTTGTTTGCCGGATCAAGAGCTACCAACTCTTTTTCCGAAGGTAACTGGCTTCAGCAGAGCGCAGATACCAAATACTGTCCTTCTAGTGTAGCCGTAGTTAGGCCACCACTTCAAGAACTCTGTAGCACCGCCTACATACCTCGCTCTGCTAATCCTGTTACCAGTGGCTGCTGCCAGTGGCGATAAGTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAGGCGCAGCGGTCGGGCTGAACGGGGGGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAACTGAGATACCTACAGCGTGAGCTATGAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTATCCGGTAAGCGGCAGGGTCGGAACAGGAGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCCTGGTATCTTTATAGTCCTGTCGGGTTTCGCCACCTCTGACTTGAGCGTCGATTTTTGTGATGCTCGTCAGGGGGGCGGAGCCTATGGAAAAACGCCAGCAACGCGGCCTTTTTACGGTTCCTGGCCTTTTGCTGGCCTTTTGCTC', 'plasmid')
            json_dict["sequences"][pTargetF.name] = pTargetF.get_json_dict()
            i = 2
            while i < len(primers):
                fwd = primers[i]
                rev = primers[i+1]
                grna_name = fwd.name[:-4]
                grna_names.append(grna_name)
                file.write(f'pcr\t{fwd.name}\t{rev.name}\t{grna_name}\t{grna_name}_fragment\n')
                json_dict['steps'].append({
                    "operation": "PCR",
                    "forward_oligo": fwd.name,
                    "reverse_oligo": rev.name,
                    "template": grna_name,
                    "output": f"{grna_name}_fragment"
                })
                i += 2
            
            # Digest
            file.write('digest\tbackbone_fragment\tSpeI\tEcoRI\t1\tbackbone_digested\n')
            for grna in grna_names:
                file.write(f'digest\t{grna}_fragment\tSpeI\tEcoRI\t1\t{grna}_digested\n')
                json_dict['steps'].append({
                    "operation": "Digest",
                    "dna": grna,
                    "enzymes": ["EcoRI","SpeI"],
                    "fragSelect": 1,
                    "output": f"{grna}_digested"
                })
            
            # Ligate
            for grna in grna_names:
                file.write(f'ligate\tbackbone_digested\t{grna}_digested\t{grna}_ligated\n')
                json_dict['steps'].append({
                    "operation": "Ligate",
                    "dnas": ["backbone_fragment", f"{grna}_digested"],
                    "output": f"{grna}_ligated"
                })
            
            # Transform
            for i in range(len(grna_names)):
                file.write(f'transform\t{grna_names[i]}_ligated\tMach1\tSpec\t37\tpTarget-{grna_names[i]}\n')
                json_dict['steps'].append({
                    "operation": "Transform",
                    "dna": f"{grna_names[i]}_ligated",
                    "strain": "Mach1",
                    "antibiotics": "Spec",
                    "temperature": 37,
                    "output": f"pTarget-{grna_names[i]}"
                })
                new_plasmid = DNA(f'pTarget-{grna_names[i]}', pcr_products[i].sequence+'GAATTCTCTAGAGTCGACCTGCAGAAGCTTAGATCTATTACCCTGTTATCCCTACTCGAGTTCATGTGCAGCTCCATAAGCAAAAGGGGATGATAAGTTTATCACCACCGACTATTTGCAACAGTGCCGTTGATCGTGCTATGATCGACTGATGTCATCAGCGGTGGAGTGCAATGTCATGAGGGAAGCGGTGATCGCCGAAGTATCGACTCAACTATCAGAGGTAGTTGGCGTCATCGAGCGCCATCTCGAACCGACGTTGCTGGCCGTACATTTGTACGGCTCCGCAGTGGATGGCGGCCTGAAGCCACACAGTGATATTGATTTGCTGGTTACGGTGACCGTAAGGCTTGATGAAACAACGCGGCGAGCTTTGATCAACGACCTTTTGGAAACTTCGGCTTCCCCTGGAGAGAGCGAGATTCTCCGCGCTGTAGAAGTCACCATTGTTGTGCACGACGACATCATTCCGTGGCGTTATCCAGCTAAGCGCGAACTGCAATTTGGAGAATGGCAGCGCAATGACATTCTTGCAGGTATCTTCGAGCCAGCCACGATCGACATTGATCTGGCTATCTTGCTGACAAAAGCAAGAGAACATAGCGTTGCCTTGGTAGGTCCAGCGGCGGAGGAACTCTTTGATCCGGTTCCTGAACAGGATCTATTTGAGGCGCTAAATGAAACCTTAACGCTATGGAACTCGCCGCCCGACTGGGCTGGCGATGAGCGAAATGTAGTGCTTACGTTGTCCCGCATTTGGTACAGCGCAGTAACCGGCAAAATCGCGCCGAAGGATGTCGCTGCCGACTGGGCAATGGAGCGCCTGCCGGCCCAGTATCAGCCCGTCATACTTGAAGCTAGACAGGCTTATCTTGGACAAGAAGAAGATCGCTTGGCCTCGCGCGCAGATCAGTTGGAAGAATTTGTCCACTACGTGAAAGGCGAGATCACCAAGGTAGTCGGCAAATAAGATGCCGCTCGCCAGTCGATTGGCTGAGCTCATAAGTTCCTATTCCGAAGTTCCGCGAACGCGTAAAGGATCTAGGTGAAGATCCTTTTTGATAATCTCATGACCAAAATCCCTTAACGTGAGTTTTCGTTCCACTGAGCGTCAGACCCCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTTTTTTTCTGCGCGTAATCTGCTGCTTGCAAACAAAAAAACCACCGCTACCAGCGGTGGTTTGTTTGCCGGATCAAGAGCTACCAACTCTTTTTCCGAAGGTAACTGGCTTCAGCAGAGCGCAGATACCAAATACTGTCCTTCTAGTGTAGCCGTAGTTAGGCCACCACTTCAAGAACTCTGTAGCACCGCCTACATACCTCGCTCTGCTAATCCTGTTACCAGTGGCTGCTGCCAGTGGCGATAAGTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAGGCGCAGCGGTCGGGCTGAACGGGGGGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAACTGAGATACCTACAGCGTGAGCTATGAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTATCCGGTAAGCGGCAGGGTCGGAACAGGAGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCCTGGTATCTTTATAGTCCTGTCGGGTTTCGCCACCTCTGACTTGAGCGTCGATTTTTGTGATGCTCGTCAGGGGGGCGGAGCCTATGGAAAAACGCCAGCAACGCGGCCTTTTTACGGTTCCTGGCCTTTTGCTGGCCTTTTGCTCACATGTTCTTTCCTGCGTTATCCCCTGATTCTGTGGATAACCGTATTACCGCCTTTGAGTGAGCTGATACCGCTCGCCGCAGCCGAACGACCGAGCGCAGCGAGTCAGTGAGCGAGGAAGCGGAAGAGCGCCTGATGCGGTATTTTCTCCTTACGCATCTGTGCGGTATTTCACACCGCATATGCTGGATCCTTGACAGCTAGCTCAGTCCTAGGTATAATACTAGT', 'plasmid')
                json_dict["sequences"][new_plasmid.name] = new_plasmid.get_json_dict()
            
            # Sequences
            file.write('\n# Input Sequences\n')
            for seq in json_dict["sequences"]:
                file.write(f'{seq}\t{json_dict["sequences"][seq]["sequence"]}\n')
            
        # Write to json construction file
        formatted_json = json.dumps(json_dict, indent=4)
        with open(f'{self.export_file_path}.json', 'w') as file:
            file.write(formatted_json)
